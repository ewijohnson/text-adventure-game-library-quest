import sys
import random


class Room:

    def __init__(self, name):
        self.name = name
        self.directions = []
        self.items = []

    def add_directions(self, direction):
        self.directions.append(direction)

    def add_items(self, item):
        self.items.append(item)

    def entering(self):
        self.enter = True

    def leaving(self):
        self.enter = False

    def inRoom(self):
        return self.enter

    def getName(self):
        return self.name

    def move(self):
        direction_input = input("\nEnter a direction <'north', 'east', 'south', 'west'>: ")
        if direction_input == 'north':
            if self.directions[0] != 'None':
                self.directions[0].entering()
                getLocation(self.directions[0])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[0] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'east':
            if self.directions[1] != 'None':
                self.directions[1].entering()
                getLocation(self.directions[1])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[1] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'south':
            if self.directions[2] != 'None':
                self.directions[2].entering()
                getLocation(self.directions[2])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[2] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'west':
            if self.directions[3] != 'None':
                self.directions[3].entering()
                getLocation(self.directions[3])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[3] == 'None':
                print("\nThat room doesn't exist. Try again.")
        else:
            print("I didn't quite get that. Try again?")

    def whereCanIMove(self):
        print('\nYou can move the following directions:')
        if self.directions[0] != 'None':
            print('north')
        if self.directions[1] != 'None':
            print('east')
        if self.directions[2] != 'None':
            print('south')
        if self.directions[3] != 'None':
            print('west')
        if self.directions[4] != 'None':
            print('up')
        if self.directions[5] != 'None':
            print('down')


#This is a subclass of class Room, and it adds two additional parameters for moving up or down
class ElevatorRoom(Room):

    def move_floors(self):
        direction_input = input("\nEnter a direction <'north', 'east', 'south', 'west', 'up', 'down'>: ")
        if direction_input == 'north':
            if self.directions[0] != 'None':
                self.directions[0].entering()
                getLocation(self.directions[0])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[0] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'east':
            if self.directions[1] != 'None':
                self.directions[1].entering()
                getLocation(self.directions[1])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[1] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'south':
            if self.directions[2] != 'None':
                self.directions[2].entering()
                getLocation(self.directions[2])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[2] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'west':
            if self.directions[3] != 'None':
                self.directions[3].entering()
                getLocation(self.directions[3])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[3] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'up':
            if self.directions[4] != 'None':
                self.directions[4].entering()
                getLocation(self.directions[4])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[4] == 'None':
                print("\nThat room doesn't exist. Try again.")
        elif direction_input == 'down':
            if self.directions[5] != 'None':
                self.directions[5].entering()
                getLocation(self.directions[5])
                self.leaving()
                patron_num = random.randint(1,20)
                if patron_num <= 15:
                    patronEncounter()
            elif self.directions[5] == 'None':
                print("\nThat room doesn't exist. Try again.")
        else:
            print("I didn't quite get that. Try again?")


class Player:

    def __init__(self, name, stats, stamina, items):
        self.name = name
        self.stats = stats
        self.stealth = stats[0]
        self.magic = stats[1]
        self.bravery = stats[2]
        self.stamina = stamina
        self.items = []

    def getName(self):
        return self.name

    def getStealth(self):
        return self.stealth

    def getMagic(self):
        return self.magic

    def getBravery(self):
        return self.bravery

    def getStamina(self):
        return self.stamina

    def getItems(self):
        return self.items


class Patron:

    def __init__(self, stats, stamina):
        self.stats = stats
        self.stealth = stats[0]
        self.magic = stats[1]
        self.bravery = stats[2]
        self.stamina = stamina

    def getStealth(self):
        return self.stealth

    def getMagic(self):
        return self.magic

    def getBravery(self):
        return self.bravery

    def getStamina(self):
        return self.stamina



#This function reads in a text file to create all instances of Room and ElevatorRoom
def createRoomInstances(infile_locations, all_locations):
    text_roomCreation = infile_locations.readlines()
    for line in text_roomCreation:
        line = line.split()
        if line[2] == 'Room':
            sliced_line = line[3:]
            sliced_line = " ".join(sliced_line)
            instanceRoom = Room(sliced_line)
            all_locations.append(instanceRoom)
        elif line[2] == 'ElevatorRoom':
            sliced_line = line[3:]
            sliced_line = " ".join(sliced_line)
            instanceRoom = ElevatorRoom(sliced_line)
            all_locations.append(instanceRoom)


#This function takes the instances of Room and ElevatorRoom and appends adjacent Locations to it, allowing for
#   moving between the locations
def appendAdjacentRoomsToLocations(infile, all_locations):
    for location in all_locations:
        line = infile.readline()
        line = clean_rooms_file(line, location)
        loopFinalLocationAppend(line, location)

#This function cleans the lines that are read in through appendAdjacentRoomsToLocation function
def clean_rooms_file(line, location):
    line = line.split()
    line = line[2:]
    line = ' '.join(line)
    #line = line.strip('[')
    #line = line.strip(']')
    line = line.replace(',', '')
    line = line.split()
    return line


#This function loops through the rooms in each cleaned line and adds the directions to each class instance
def loopFinalLocationAppend(line, location):
    for rooms in line:
        if rooms != 'None':
            rooms = eval(rooms)
            location.add_directions(rooms)
        else:
            location.add_directions(rooms)


def introduction():
    print('This is the introduction!')


def getLocation(place):
    currentLocation = place.getName()
    print(f'\nYou are currently in the {currentLocation}.')


def getLocationHelp():
    print("\nYou have a few options for actions.")
    print("Enter one of the following:")
    print("'move'\n'check items'\n'look around'\n'talk'\n'get item'\n'use item'\n'Where am I?'\n'Where can I move?'\n'quit'\n")


def encounter_sneak(rand_patron, player_stealth, patron_stealth):
    random_stealth = random.randint(0,10)
    if player_stealth > patron_stealth:
        stealth_prob = player_stealth - patron_stealth
        if stealth_prob > random_stealth:
            print('\nYou successfully snuck away!')
            print("\nYour stealth is now at", update_sneak(1))
            return
        elif stealth_prob <= random_stealth:
            print("\nYou weren't stealthy enough this time!")
            print("Your stamina has decreased! It is now at ", update_stamina(-1), '\n')
            patronEncounterLoop(rand_patron)
    elif player_stealth <= patron_stealth:
        stealth_prob = 1
        if stealth_prob > random_stealth:
            print('\nYou successfully snuck away!')
            print("\nYour stealth is now at", update_sneak(1))
            return
        elif stealth_prob <= patron_stealth:
            print("\nYou weren't stealthy enough this time!")
            print("Your stamina has decreased! It is now at", update_stamina(-1), '\n')
            patronEncounterLoop(rand_patron)


def encounter_magic():
    return


def encounter_bravery():
    return


def patronEncounter():
    saved_stamina = player.getStamina()
    patron_infile = open('patron_lines.txt', 'r')
    patron_text = patron_infile.readlines()
    patron_infile.close()
    rand_patron_line_num = random.randint(1, 40)
    rand_patron = Patron([random.randint(1, 10), random.randint(1, 10), random.randint(1, 10)], random.randint(10, 25))
    print('\nA library patron appears!')
    print(patron_text[rand_patron_line_num - 1])
    patronEncounterLoop(rand_patron)
    player.stamina = saved_stamina
    print("Your stamina is now at", update_stamina(1))


def patronEncounterLoop(rand_patron):
    encounter_input = input('What would you like to do? <"Sneak away", "Use magic", "Help patron"> ')
    if encounter_input[:5] == 'sneak':
        encounter_sneak(rand_patron, (player.stealth), (rand_patron.stealth))
        return
    elif encounter_input == 'use magic':
        encounter_magic()
    elif encounter_input == 'help patron':
        encounter_bravery()
    else:
        print("\nYou can't do that now. Try something else.\n")
        patronEncounterLoop(rand_patron)


def update_stamina(num):
    player.stamina = player.stamina + num
    return player.getStamina()

def update_sneak(num):
    player.stealth = player.stealth + num
    return player.getStealth()


def initialization_answer(choice):
    if choice == 'y':
        main()
    elif choice == 'n':
        sys.exit()
    else:
        opening_choice = input("I don't know what you want. Try again? Type 'yes' or 'no'. ")
        opening_choice = opening_choice[0].lower()
        initialization_answer(opening_choice)


def initialization():
    opening_choice = input("Would you like to enter the library? ")
    opening_choice = opening_choice[0].lower()
    initialization_answer(opening_choice)


def main():
    game = True
    loc = all_locations[0]
    loc.entering()
    getLocation(loc)
    while game is True:
        game_loop()


def game_loop():
    for loc in all_locations:
        try:
            while loc.inRoom() is True:
                query = input('\nWhat would you like to do? ')
                query = query.lower()
                query = query.strip('?')
                #the 'help' query will allow the player to see all possible actions
                if query == 'help':
                    getLocationHelp()
                elif query[:4] == 'move':
                    #This checks to see if the current room is subclass ElevatorRoom or class Room
                    if isinstance(loc, ElevatorRoom):
                        #if class ElevatorRoom, there are more movement options (up or down, additionally)
                        loc.move_floors()
                        break
                    elif isinstance(loc, Room):
                        #if class is just Room, there are just the basic four movement options
                        loc.move()
                        break
                #Where can I move?
                elif query[:13] == 'where can i m':
                    loc.whereCanIMove()
                elif query == 'check items':
                    print('check items')
                elif query == 'look around':
                    print('Describe the settings of the room')
                elif query == 'talk':
                    print('talk to someone in current location')
                elif query == 'get item':
                    print('get an item')
                elif query == 'use item':
                    print('use an item')
                elif query == 'where am i':
                    getLocation(loc)
                elif query == 'quit':
                    quitting_input = input("Are you sure? ")
                    if quitting_input[0].lower() == 'y':
                        print("\nThanks for playing!")
                        loc.leaving()
                        sys.exit()
                    elif quitting_input[0].lower() == 'n':
                        break
                    else:
                        print("I didn't understand you.")
                else:
                    print('Didn\'t think of that option yet. Nice.')
        except:
            pass


player = Player('Eric', [8, 5, 5], 10, [])

#This creates all instances of Room and ElevatorRoom
all_locations = []
infile_locations = open('create_all_rooms.txt', 'r')
createRoomInstances(infile_locations, all_locations)
infile_locations.close()

#This links adjacent Locations to each Location, allowing for movement
infile = open('adjacent_rooms_file.txt', 'r')
appendAdjacentRoomsToLocations(infile, all_locations)
infile.close()

introduction()
initialization()
